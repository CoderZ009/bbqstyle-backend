// Enhanced admin order management with carrier integration\nclass OrderManagement {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.loadOrders();\n    }\n\n    bindEvents() {\n        // Add tracking form submission\n        document.addEventListener('submit', (e) => {\n            if (e.target.classList.contains('tracking-form')) {\n                e.preventDefault();\n                this.handleAddTracking(e.target);\n            }\n        });\n\n        // Bulk tracking update button\n        const bulkUpdateBtn = document.getElementById('bulkTrackingUpdate');\n        if (bulkUpdateBtn) {\n            bulkUpdateBtn.addEventListener('click', () => this.bulkUpdateTracking());\n        }\n    }\n\n    async handleAddTracking(form) {\n        const formData = new FormData(form);\n        const orderId = formData.get('orderId');\n        const trackingId = formData.get('trackingId');\n        const trackingLink = formData.get('trackingLink');\n        const carrier = formData.get('carrier');\n\n        if (!trackingId) {\n            alert('Tracking ID is required');\n            return;\n        }\n\n        try {\n            const response = await fetch(`/api/admin/orders/${orderId}/tracking`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    trackingId,\n                    trackingLink,\n                    carrier\n                })\n            });\n\n            const result = await response.json();\n\n            if (result.success) {\n                alert('Tracking information added successfully!');\n                this.loadOrders(); // Refresh the orders list\n                form.reset();\n            } else {\n                alert('Error: ' + result.error);\n            }\n        } catch (error) {\n            console.error('Error adding tracking:', error);\n            alert('Failed to add tracking information');\n        }\n    }\n\n    async bulkUpdateTracking() {\n        const button = document.getElementById('bulkTrackingUpdate');\n        const originalText = button.textContent;\n        \n        button.disabled = true;\n        button.textContent = 'Updating...';\n\n        try {\n            const response = await fetch(`${API_BASE_URL}/api/update-tracking-status`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            const result = await response.json();\n\n            if (result.success) {\n                alert(`Successfully updated ${result.message}`);\n                this.loadOrders(); // Refresh the orders list\n            } else {\n                alert('Error: ' + result.message);\n            }\n        } catch (error) {\n            console.error('Bulk update error:', error);\n            alert('Failed to update tracking status');\n        } finally {\n            button.disabled = false;\n            button.textContent = originalText;\n        }\n    }\n\n    async loadOrders() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/api/admin/orders`);\n            const orders = await response.json();\n            this.renderOrdersTable(orders);\n        } catch (error) {\n            console.error('Error loading orders:', error);\n        }\n    }\n\n    renderOrdersTable(orders) {\n        const tbody = document.querySelector('#ordersTable tbody');\n        if (!tbody) return;\n\n        tbody.innerHTML = orders.map(order => `\n            <tr class=\"border-b hover:bg-gray-50\">\n                <td class=\"px-4 py-3\">#${order.order_id}</td>\n                <td class=\"px-4 py-3\">${order.customer_name || order.first_name + ' ' + order.last_name}</td>\n                <td class=\"px-4 py-3\">â‚¹${order.total_amount}</td>\n                <td class=\"px-4 py-3\">\n                    <span class=\"px-2 py-1 rounded-full text-xs font-medium ${\n                        this.getStatusBadgeClass(order.status)\n                    }\">\n                        ${this.getStatusText(order.status)}\n                    </span>\n                </td>\n                <td class=\"px-4 py-3\">${order.payment_mode}</td>\n                <td class=\"px-4 py-3\">\n                    ${order.tracking_id ? `\n                        <div class=\"text-sm\">\n                            <div><strong>ID:</strong> ${order.tracking_id}</div>\n                            ${order.carrier ? `<div><strong>Carrier:</strong> ${this.getCarrierName(order.carrier)}</div>` : ''}\n                        </div>\n                    ` : '<span class=\"text-gray-400\">Not added</span>'}\n                </td>\n                <td class=\"px-4 py-3\">${new Date(order.order_date).toLocaleDateString()}</td>\n                <td class=\"px-4 py-3\">\n                    <div class=\"flex space-x-2\">\n                        <button onclick=\"orderManagement.showTrackingModal(${order.order_id})\" \n                                class=\"text-blue-600 hover:text-blue-800 text-sm\">\n                            ${order.tracking_id ? 'Edit' : 'Add'} Tracking\n                        </button>\n                        <button onclick=\"orderManagement.updateOrderStatus(${order.order_id}, 'delivered')\" \n                                class=\"text-green-600 hover:text-green-800 text-sm\"\n                                ${order.status === 'delivered' ? 'disabled' : ''}>\n                            Mark Delivered\n                        </button>\n                    </div>\n                </td>\n            </tr>\n        `).join('');\n    }\n\n    showTrackingModal(orderId) {\n        const modal = document.getElementById('trackingModal');\n        const form = document.getElementById('trackingForm');\n        \n        if (modal && form) {\n            form.querySelector('[name=\"orderId\"]').value = orderId;\n            modal.classList.remove('hidden');\n        }\n    }\n\n    hideTrackingModal() {\n        const modal = document.getElementById('trackingModal');\n        if (modal) {\n            modal.classList.add('hidden');\n        }\n    }\n\n    async updateOrderStatus(orderId, status) {\n        try {\n            const response = await fetch(`/api/admin/orders/${orderId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ status })\n            });\n\n            const result = await response.json();\n\n            if (result.success) {\n                alert('Order status updated successfully!');\n                this.loadOrders();\n            } else {\n                alert('Error: ' + result.error);\n            }\n        } catch (error) {\n            console.error('Error updating order status:', error);\n            alert('Failed to update order status');\n        }\n    }\n\n    getStatusBadgeClass(status) {\n        const classes = {\n            'pending': 'bg-yellow-100 text-yellow-800',\n            'processing': 'bg-blue-100 text-blue-800',\n            'shipped': 'bg-purple-100 text-purple-800',\n            'in_transit': 'bg-indigo-100 text-indigo-800',\n            'out_for_delivery': 'bg-orange-100 text-orange-800',\n            'delivered': 'bg-green-100 text-green-800',\n            'cancelled': 'bg-red-100 text-red-800',\n            'returned': 'bg-gray-100 text-gray-800'\n        };\n        return classes[status] || 'bg-gray-100 text-gray-800';\n    }\n\n    getStatusText(status) {\n        const texts = {\n            'pending': 'Pending',\n            'processing': 'Processing',\n            'shipped': 'Shipped',\n            'in_transit': 'In Transit',\n            'out_for_delivery': 'Out for Delivery',\n            'delivered': 'Delivered',\n            'cancelled': 'Cancelled',\n            'returned': 'Returned'\n        };\n        return texts[status] || status;\n    }\n\n    getCarrierName(carrier) {\n        const names = {\n            'amazon': 'Amazon',\n            'xpressbees': 'XpressBees',\n            'shiprocket': 'Shiprocket'\n        };\n        return names[carrier?.toLowerCase()] || carrier;\n    }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.orderManagement = new OrderManagement();\n});