const express = require('express');\nconst mysql = require('mysql');\nrequire('dotenv').config();\n\nconst app = express();\napp.use(express.json());\n\n// MySQL Connection\nconst db = mysql.createConnection({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME\n});\n\ndb.connect((err) => {\n    if (err) {\n        console.error('MySQL connection error:', err);\n        process.exit(1);\n    }\n    console.log('Webhook server connected to MySQL database');\n});\n\n// Shiprocket webhook endpoint\napp.post('/webhook/shiprocket', async (req, res) => {\n    try {\n        const { awb, current_status, order_id } = req.body;\n        \n        console.log('Shiprocket webhook received:', { awb, current_status, order_id });\n        \n        // Update order status from webhook data\n        const normalizedStatus = normalizeShiprocketWebhookStatus(current_status);\n        \n        await new Promise((resolve, reject) => {\n            db.query('UPDATE orders SET status = ? WHERE tracking_id = ?', \n                [normalizedStatus, awb], (err, result) => {\n                    if (err) {\n                        console.error('Database update error:', err);\n                        reject(err);\n                    } else {\n                        console.log(`Updated order with AWB ${awb} to status: ${normalizedStatus}`);\n                        resolve(result);\n                    }\n                });\n        });\n        \n        res.status(200).json({ status: 'success' });\n        \n    } catch (error) {\n        console.error('Webhook processing error:', error);\n        res.status(500).json({ status: 'error', message: error.message });\n    }\n});\n\nfunction normalizeShiprocketWebhookStatus(status) {\n    const statusMap = {\n        'Shipped': 'shipped',\n        'In Transit': 'in_transit',\n        'Out For Delivery': 'out_for_delivery',\n        'Delivered': 'delivered',\n        'RTO': 'returned',\n        'Exception': 'delayed',\n        'Pickup Scheduled': 'processing',\n        'Picked Up': 'shipped'\n    };\n    return statusMap[status] || 'processing';\n}\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n    res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\nconst PORT = process.env.WEBHOOK_PORT || 5000;\napp.listen(PORT, () => {\n    console.log(`Shiprocket webhook server running on port ${PORT}`);\n    console.log(`Webhook URL: http://localhost:${PORT}/webhook/shiprocket`);\n});