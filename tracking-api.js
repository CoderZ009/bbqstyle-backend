const express = require('express');\nconst axios = require('axios');\nconst mysql = require('mysql');\nrequire('dotenv').config();\n\nconst router = express.Router();\n\n// MySQL Connection\nconst db = mysql.createConnection({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME\n});\n\n// Enhanced track order endpoint with carrier integration\nrouter.post('/track-order-enhanced', async (req, res) => {\n    const { trackingInput } = req.body;\n\n    if (!trackingInput) {\n        return res.status(400).json({ success: false, message: 'Tracking input is required' });\n    }\n\n    try {\n        const query = 'SELECT order_id, tracking_id, tracking_link, carrier FROM orders WHERE order_id = ? OR tracking_id = ?';\n        \n        const orderResult = await new Promise((resolve, reject) => {\n            db.query(query, [trackingInput, trackingInput], (err, results) => {\n                if (err) reject(err);\n                else resolve(results[0]);\n            });\n        });\n\n        if (!orderResult) {\n            return res.json({ success: false, message: 'Order not found' });\n        }\n\n        if (orderResult.carrier && orderResult.tracking_id) {\n            const trackingData = await getTrackingData(orderResult.tracking_id, orderResult.carrier);\n            \n            if (trackingData.success) {\n                return res.json({\n                    success: true,\n                    orderId: orderResult.order_id,\n                    trackingId: orderResult.tracking_id,\n                    carrier: orderResult.carrier,\n                    status: trackingData.status,\n                    location: trackingData.location,\n                    timestamp: trackingData.timestamp,\n                    trackingLink: orderResult.tracking_link\n                });\n            }\n        }\n\n        if (orderResult.tracking_link) {\n            return res.json({ \n                success: true, \n                orderId: orderResult.order_id,\n                trackingLink: orderResult.tracking_link \n            });\n        }\n\n        res.json({ success: false, message: 'Tracking not available for this order' });\n    } catch (error) {\n        console.error('Tracking error:', error);\n        res.status(500).json({ success: false, message: 'Tracking service error' });\n    }\n});\n\n// Add enhanced tracking to order\nrouter.post('/admin/orders/:orderId/tracking-enhanced', async (req, res) => {\n    const orderId = req.params.orderId;\n    const { trackingId, trackingLink, carrier } = req.body;\n\n    if (!trackingId) {\n        return res.status(400).json({ error: 'Tracking ID is required' });\n    }\n\n    db.query('UPDATE orders SET tracking_id = ?, tracking_link = ?, carrier = ?, status = \"shipped\" WHERE order_id = ?',\n        [trackingId, trackingLink || null, carrier || null, orderId], (err) => {\n            if (err) {\n                console.error('Error adding tracking:', err);\n                return res.status(500).json({ error: 'Database error' });\n            }\n            res.json({ success: true, message: 'Tracking added successfully' });\n        });\n});\n\n// Bulk update tracking statuses\nrouter.post('/update-tracking-status', async (req, res) => {\n    try {\n        const ordersToUpdate = await new Promise((resolve, reject) => {\n            db.query(`\n                SELECT order_id, tracking_id, carrier, status \n                FROM orders \n                WHERE tracking_id IS NOT NULL \n                AND carrier IS NOT NULL \n                AND status NOT IN ('delivered', 'cancelled', 'returned')\n            `, (err, results) => {\n                if (err) reject(err);\n                else resolve(results);\n            });\n        });\n\n        let updatedCount = 0;\n        \n        for (const order of ordersToUpdate) {\n            const trackingData = await getTrackingData(order.tracking_id, order.carrier);\n            \n            if (trackingData.success && trackingData.status !== order.status) {\n                await new Promise((resolve, reject) => {\n                    db.query('UPDATE orders SET status = ? WHERE order_id = ?', \n                        [trackingData.status, order.order_id], (err) => {\n                            if (err) reject(err);\n                            else resolve();\n                        });\n                });\n                updatedCount++;\n            }\n            \n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n        \n        res.json({ \n            success: true, \n            message: `Updated ${updatedCount} orders`,\n            totalChecked: ordersToUpdate.length\n        });\n        \n    } catch (error) {\n        console.error('Bulk tracking update error:', error);\n        res.status(500).json({ success: false, message: 'Bulk update failed' });\n    }\n});\n\n// Shiprocket webhook\nrouter.post('/shiprocket-webhook', async (req, res) => {\n    try {\n        const { awb, current_status, order_id } = req.body;\n        \n        const normalizedStatus = normalizeShiprocketWebhookStatus(current_status);\n        \n        await new Promise((resolve, reject) => {\n            db.query('UPDATE orders SET status = ? WHERE tracking_id = ?', \n                [normalizedStatus, awb], (err) => {\n                    if (err) reject(err);\n                    else resolve();\n                });\n        });\n        \n        console.log(`Webhook update - AWB: ${awb}, Status: ${normalizedStatus}`);\n        res.status(200).json({ status: 'success' });\n        \n    } catch (error) {\n        console.error('Webhook error:', error);\n        res.status(500).json({ status: 'error', message: error.message });\n    }\n});\n\n// Carrier tracking functions\nasync function getTrackingData(trackingNumber, carrier) {\n    try {\n        switch (carrier.toLowerCase()) {\n            case 'amazon':\n                return await trackAmazon(trackingNumber);\n            case 'xpressbees':\n                return await trackXpressBees(trackingNumber);\n            case 'shiprocket':\n                return await trackShiprocket(trackingNumber);\n            default:\n                return { success: false, error: 'Unsupported carrier' };\n        }\n    } catch (error) {\n        console.error(`Error tracking ${carrier}:`, error);\n        return { success: false, error: error.message };\n    }\n}\n\nasync function trackAmazon(trackingNumber) {\n    try {\n        const response = await axios.get(`https://track.amazon.com/api/tracker/${trackingNumber}`, {\n            headers: {\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n                'Accept': 'application/json'\n            },\n            timeout: 10000\n        });\n        \n        if (response.data && response.data.eventHistory) {\n            const latest = response.data.eventHistory[0];\n            return {\n                success: true,\n                status: normalizeAmazonStatus(latest.statusText),\n                location: latest.location || 'N/A',\n                timestamp: latest.eventTime || new Date().toISOString()\n            };\n        }\n        return { success: false, error: 'No tracking data' };\n    } catch (error) {\n        return { success: false, error: 'Amazon tracking unavailable' };\n    }\n}\n\nasync function trackXpressBees(trackingNumber) {\n    try {\n        const response = await axios.get(`https://www.xpressbees.com/api/shipments/track/${trackingNumber}`, {\n            headers: {\n                'Authorization': `Bearer ${process.env.XPRESSBEES_TOKEN}`,\n                'Content-Type': 'application/json'\n            },\n            timeout: 10000\n        });\n        \n        if (response.data && response.data.status === 'success') {\n            const data = response.data.data;\n            return {\n                success: true,\n                status: normalizeXpressBeesStatus(data.current_status),\n                location: data.current_location || 'N/A',\n                timestamp: data.last_update_time || new Date().toISOString()\n            };\n        }\n        return { success: false, error: 'No tracking data' };\n    } catch (error) {\n        return { success: false, error: 'XpressBees tracking unavailable' };\n    }\n}\n\nasync function trackShiprocket(trackingNumber) {\n    try {\n        const response = await axios.get(`https://apiv2.shiprocket.in/v1/external/courier/track/awb/${trackingNumber}`, {\n            headers: {\n                'Authorization': `Bearer ${process.env.SHIPROCKET_TOKEN}`,\n                'Content-Type': 'application/json'\n            },\n            timeout: 10000\n        });\n        \n        if (response.data && response.data.tracking_data) {\n            const trackData = response.data.tracking_data;\n            const shipmentTrack = trackData.shipment_track;\n            \n            if (shipmentTrack && shipmentTrack.length > 0) {\n                const latest = shipmentTrack[shipmentTrack.length - 1];\n                return {\n                    success: true,\n                    status: normalizeShiprocketStatus(latest.current_status, trackData.track_status),\n                    location: latest.location || 'N/A',\n                    timestamp: latest.date || new Date().toISOString()\n                };\n            }\n        }\n        return { success: false, error: 'No tracking data' };\n    } catch (error) {\n        return { success: false, error: 'Shiprocket tracking unavailable' };\n    }\n}\n\n// Status normalization functions\nfunction normalizeAmazonStatus(status) {\n    const statusMap = {\n        'shipped': 'shipped',\n        'out for delivery': 'out_for_delivery',\n        'delivered': 'delivered',\n        'in transit': 'in_transit',\n        'arriving today': 'out_for_delivery'\n    };\n    return statusMap[status?.toLowerCase()] || 'processing';\n}\n\nfunction normalizeXpressBeesStatus(status) {\n    const statusMap = {\n        'shipped': 'shipped',\n        'in transit': 'in_transit',\n        'out for delivery': 'out_for_delivery',\n        'delivered': 'delivered',\n        'pickup scheduled': 'processing',\n        'picked up': 'shipped'\n    };\n    return statusMap[status?.toLowerCase()] || 'processing';\n}\n\nfunction normalizeShiprocketStatus(status, trackStatus) {\n    if (trackStatus === 1) return 'delivered';\n    \n    const statusMap = {\n        'shipped': 'shipped',\n        'in transit': 'in_transit',\n        'out for delivery': 'out_for_delivery',\n        'pickup scheduled': 'processing',\n        'picked up': 'shipped'\n    };\n    return statusMap[status?.toLowerCase()] || 'in_transit';\n}\n\nfunction normalizeShiprocketWebhookStatus(status) {\n    const statusMap = {\n        'Shipped': 'shipped',\n        'In Transit': 'in_transit',\n        'Out For Delivery': 'out_for_delivery',\n        'Delivered': 'delivered',\n        'RTO': 'returned',\n        'Exception': 'delayed',\n        'Pickup Scheduled': 'processing',\n        'Picked Up': 'shipped'\n    };\n    return statusMap[status] || 'processing';\n}\n\nmodule.exports = router;